# To get started with security, check out the documentation:
# http://symfony.com/doc/current/book/security.html
security:
#Pour encoder les mdp (quel est l'algo pr encoder les mdp
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        Wa\BackBundle\Entity\User:
        ### UTILISATION DU sha51 ######
            #algorithm: sha512
            #Ajouter de la complexite avec sha512
            #encode_as_base64: true
            #iterations: 1000
        ### UTILISATION DU bcrypt (nécessite une version 5.5 de PHP) ######
            algorithm: bcrypt
            #Définir la longueur du mdp(entre 4 et 31)
            cost: 15

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    #Définit d'ou viennent les users in_memory (in_memory =dans ce fichier) ou enites User
    providers:
        in_memory:
            memory:
                users:
                    #login
                    admin:
                        password: admin
                        roles: ROLE_ADMIN #un rôle commence toujours par ROLE_
                    #autre façon d'écrire
                    test: { password: test, roles: ROLE_COMMERCIAL }
                    superadmin: { password: azerty, roles: ROLE_SUPER_ADMIN }

        #On fait le lien avec la classe USER
        user_admin:
            #On définit la propriété pour se connecter (connexion avec le login)
            #entity: { class: Wa\BackBundle\Entity\User, property: login}

            #On définit la propriété pour se connecter (connexion avec l'email
            #entity: { class: Wa\BackBundle\Entity\User, property: email}

            #Permet de se connecter avec le log ou l'email se réfère à la classe UserRepository
            entity: { class: Wa\BackBundle\Entity\User }

        #Permet de fournir les admin créer par l'entiités et dans ce fichier
        mix:
            chain:
                provider: [in_memory, user_admin]

    #Définir les droits/une hiérarchie
    role_hierarchy:
        # si j'essaye d'accéder à /product en tant que commercial sachant qu'un commercial peut y accéder
        # alors en tant qu'admin je pourrai également y accéder
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        ROLE_ADMIN: ROLE_COMMERCIAL

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        #On définit un autre firewall pour gérer le form de conx°
        loginfirewall:
            #Le $ permet de dire termine par on indique a login_check que la validation se fait
            # par le firewall qu'on a définit admin/login
            #Tout ce qu'il y a derrière login/ c'est mon firewall qui prend le relai grâce au login$
            pattern: ^/admin/login$
            security: false

        main:
            #Attrappe ttes les pages qui commence par admin / Pattern permet d'être plus précis
            #Et sur ces urls je dois être connecté
            pattern: ^/admin
            anonymous: false
            # activate different ways to authenticate

            #Ce qui on la possibilité de changer d'user sont ROLE_SUPER_NANA le mettre aussi dans hierarchie
            switch_user: { role: ROLE_SUPER_ADMIN, parameter: _changement_de_compte }
            # pour changer d'utilisateur il faut ajouter dans l'url ?_switch_user=admin
            # pour revenir à l'état normal il faut ajouter dans l'url ?_switch_user=_exit

            #V.1 Créer un provider qui fait le lien avec celui du haut (l'entité)
            #provider: user_admin

            #V.2 Indiquer que le provider est mixe
            provider: mix

            #http_basic:
                #Le nom de la boite de dialogue
                #realm: "Test SECU"
                #Va chercher les infos du in memory pour te connecter en http_basic
                #provider: in_memory

            # http://symfony.com/doc/current/book/security.html#a-configuring-how-your-users-will-authenticate

            # Faire un formulaire de connexion du coup en commente http_basic
            form_login:
                login_path: wa_back_login
                check_path: wa_back_login_check
                #activation de la protection csrf
                csrf_provider: security.csrf.token_manager

                # spécifie l'url sur laquelle atterir si il n'y a rien en "mémoire"
                default_target_path: wa_back_homepage
                # oblige à rediriger sur le default_target_path
                always_use_default_target_path: true
            #Déconnexion gérer par Symfony
            logout:
                path: wa_back_logout
                #Quand je me déconnecte j'arrive sur la page connexion
                target: /admin/login

            #Gérer le remember me / Le mettre dans le name de la case à cocher
            remember_me:
                key: "%secret%"
                lifetime: 172800 # On retient pendant 2 jours (en secondes)
            # http://symfony.com/doc/current/cookbook/security/form_login_setup.html



    #Définir les autorisations de connexion en fonction de l'authentification
    access_control:
    - { path: ^/admin, role: ROLE_COMMERCIAL }
